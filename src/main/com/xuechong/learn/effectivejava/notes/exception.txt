异常
<只针对不正常的条件才使用异常>
	*异常只应该使用于不正常的条件,他们永远不应该被用于正常的控制流
	*一个良好设计的API不应该强迫它的客户为了正常的控制流而使用异常

<对于可恢复的条件使用被检查的异常,对于程序错误使用运行时异常>
	*如果期望调用者能够恢复,那么对于这样的条件应选择被检查的异常
	*用运行时异常来指明程序错误
	*你所实现的所有的未被检查的抛出结构都应该是RuntimeException的子类

<避免不必要的使用被检查异常>

<尽量使用标准的异常>

<抛出的异常要适合于响应的抽象>
	*高层的实现应该捕获低层的异常,同时抛出一个可以按照高层抽象进行解释的异常
	*异常链接:如果低层的异常对于调试该异常被抛出的情形非常有帮助,
		那么使用异常链接是很合适的.
	*尽管异常转译比不加选择的传递低层异常的做法有所改进,但是它不能被滥用